// Code generated by capnpc-go. DO NOT EDIT.

package book

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Book capnp.Struct

// Book_TypeID is the unique identifier for the type Book.
const Book_TypeID = 0xd66b6c9292a69382

func NewBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Book(st), err
}

func NewRootBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Book(st), err
}

func ReadRootBook(msg *capnp.Message) (Book, error) {
	root, err := msg.Root()
	return Book(root.Struct()), err
}

func (s Book) String() string {
	str, _ := text.Marshal(0xd66b6c9292a69382, capnp.Struct(s))
	return str
}

func (s Book) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Book) DecodeFromPtr(p capnp.Ptr) Book {
	return Book(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Book) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Book) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Book) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Book) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Book) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Book) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Book) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Book) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Book) Pages() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Book) SetPages(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Book_List is a list of Book.
type Book_List = capnp.StructList[Book]

// NewBook creates a new list of Book.
func NewBook_List(s *capnp.Segment, sz int32) (Book_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Book](l), err
}

// Book_Future is a wrapper for a Book promised by a client call.
type Book_Future struct{ *capnp.Future }

func (f Book_Future) Struct() (Book, error) {
	p, err := f.Future.Ptr()
	return Book(p.Struct()), err
}

const schema_e445b2605be6742b = "x\xda\x12Ht`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xbfi\xf2\xb2I\x93r\xb2\xaf1\x04\x8a02\xfe" +
	"\xd7.y\x16\x9d\xb0\xc9\xf5\x09\x03+#;\x03\x83\xe0" +
	"\xd1S\x82\x17A\xf4\xd9r\x06\xdd\xff\xc5E\xc9\xfaI" +
	"\xf9\xf9\xd9L`R/9\xb1 \xaf\xc0\xca)??" +
	"\x9b\x81!\x80\x911\x90\x83\x99\x85\x81\x81\x85\x91\x81A" +
	"P\xd3\x88\x81!P\x85\x991\xd0\x80\x89\x91\x91Q\x84" +
	"\x11$\xa6\x0b\x12\xd3`f\x0c4ab\x94/\xc9," +
	"\xc9Ie\xe4a`b\xe4a`\x94/HLO-" +
	"f\xe4``b\xe4``\x04\x04\x00\x00\xff\xffaU" +
	"#\x9b"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e445b2605be6742b,
		Nodes: []uint64{
			0xd66b6c9292a69382,
		},
		Compressed: true,
	})
}
